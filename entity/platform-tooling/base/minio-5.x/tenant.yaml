apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: minio
  namespace: minio
scheduler:
  name: ""
spec:
  ## TODO: create patch
  certConfig:
    commonName: "*.minio-hl.minio.svc.cluster.local"
    dnsNames:
    - minio-minio-0-{0...3}.minio-hl.minio.svc.cluster.local
    - "*.local.klessen.cloud"
    organizationName:
    - system:nodes
  ## TODO: create patch
  configuration:
    name: minio-env-configuration
  exposeServices: {}
  ## TODO: create patch
  ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific
  ## services created by the operator.
  serviceMetadata:
    minioServiceLabels: { }
    minioServiceAnnotations: { }
    consoleServiceLabels: { }
    consoleServiceAnnotations: { }
  features:
    ## Enable S3 specific features such as Bucket DNS which would allow `buckets` to be
    ## accessible as DNS entries of form `<bucketname>.minio.namespace.svc.cluster.local`
    ## This feature is turned off by default
    bucketDNS: true
    ## Specify a list of domains used to access MinIO and Console
    ## TODO: create patch
    domains:
    - local.klessen.cloud
    ## Enable access via SFTP
    ## This feature is turned off by default
    # enableSFTP: false
  image: quay.io/minio/minio:RELEASE.2023-10-16T04-13-43Z
  imagePullPolicy: IfNotPresent
  imagePullSecret: {}
  kes:
    env:
    - name: APPROLE_ROLE_ID
      valueFrom:
        secretKeyRef:
          name: minio-kes-credentials
          key: APPROLE_ROLE_ID
    - name: APPROLE_SECRET_ID
      valueFrom:
        secretKeyRef:
          name: minio-kes-credentials
          key: APPROLE_SECRET_ID
    # image: minio/kes:2023-08-19T17-27-47Z
    image: minio/kes:2023-10-03T00-48-37Z
    imagePullPolicy: IfNotPresent
    kesSecret:
      name: minio-kes-config
    keyName: my-minio-key
    labels:
      app: minio-kes
    replicas: 1
    resources: {}
    ## TODO: create patch
    clientCertSecret:
      name: vault-ca-cert
      type: Opaque
    ## TODO: create patch
    nodeSelector:
      klessen.cloud/operator-home: "true"
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: v1.min.io/kes
              operator: In
              values:
              - minio-kes
          topologyKey: kubernetes.io/hostname
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000
      capabilities:
        add:
        - IPC_LOCK
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
  - affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: v1.min.io/tenant
              operator: In
              values:
              - minio
          topologyKey: kubernetes.io/hostname
    name: minio
    resources: {}
    servers: 1
    volumeClaimTemplate:
      apiVersion: v1
      kind: persistentvolumeclaims
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
    volumesPerServer: 4
  requestAutoCert: true
  serviceAccountName: minio-sa
  users:
  - name: minio-user-1
status:
  availableReplicas: 0
  certificates: {}
  currentState: ""
  pools: null
  revision: 0
  syncVersion: ""
  usage: {}
